function onRun( context ){
  var doc = context.document,
      pages = doc.pages();

  for (var i = 0; i < pages.count(); i++) {
    var page = pages[i],
        artboards = page.artboards();

    if( page.name() != "Symbols"){
        renameArtboards( page, artboards );
        reorderLayers( page, artboards );
    }
  }

  doc.showMessage('Artboards renamed');
}



function renameArtboards( page, artboards ){
  // Variables to figure out the names (letter for row, number for column).
  var currentRow = -1;
  var currentColumn = -1;
  var lastTop = -10000000000000000000;

  // Set up the artboards object.
  var artboardsMeta = [];

  // Add artboard data to the object.
  for (var i = 0; i < artboards.count(); i++) {
    var artboard = artboards[i];
    var frame = artboard.frame();
    var artboardName = artboard.name();


    artboardsMeta.push({
      artboard: artboard,
      name: artboardName,
      left: frame.x(),
      top: frame.y()
    });
  }

  // Sort artboards by x and y position (grouping).
  artboardsMeta.sort(function(a, b) {
    if (a.top != b.top) {
      return a.top - b.top;
    }
    return a.left - b.left;
  });

  // artboard object with
  var artboardRows = [];
  var pageName = page.name();

  // Align artboards to grid, assign names.
  for (var i = 0; i < artboardsMeta.length; ++i) {

    var artboard = artboardsMeta[i];

    if (artboard.top > lastTop) {
      ++currentRow;
      currentColumn = 0;
      lastTop = artboard.top;
    }


    // Get the letter for the row
    if(currentRow <= 25) {
      var rowName = String.fromCharCode(65 + currentRow);
    }

    if(currentRow > 25) {
      var rowName = 'A' + String.fromCharCode(65 + parseInt(currentRow - 26));
    }


    // Get the zero based number for the column
    var columnName = '';

    if( currentColumn < 10 ){
      columnName += '0';
    }
    columnName += currentColumn;


    // Assemble the new artboard name
    var newArtboardName = pageName + ' â€“ ' + rowName + ' ' + columnName;
    artboard.artboard.setName( newArtboardName );

    ++currentColumn;
  }
}






function reorderLayers(page, artboards){
  // Sort artboards in the Layers List.
  var layersList = [];

  for (var i = 0; i < artboards.count(); i++) {
    var artboard = artboards[i];
    var name = artboard.name();
    layersList.push({
      artboard: artboard,
      name: name
    });
  }

  // Sort layers list by name.
  layersList.sort(function(a, b){
    if(a.name < b.name) {
      return 1
    }
    if(a.name > b.name) {
      return -1
    }
    return 0
  });

  // Loop through the alphabetized items, remove the old ones and add the new ones to reorder
  for (var i = 0; i < layersList.length; i++) {
    var artboard = layersList[i];
    removeArtboardFromPage(page, artboard.name)
    addArtboard(page, artboard.artboard);
  }

};

// Helper function to add artboards.
function addArtboard(page, artboard) {
  var frame = artboard.frame();
  frame.constrainProportions = false;
  page.addLayers([artboard]);
  return artboard;
};

// Helper function to remove artboards.
function removeArtboardFromPage(page, name) {
  var theArtboard = null;
  var abs = page.artboards().objectEnumerator();

  while (a = abs.nextObject()) {
    if (a.name() == name) {
      page.removeLayer(a)
      break;
    }
  }
}